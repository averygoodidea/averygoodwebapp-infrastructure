AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: WaterApi Infrastructure (ApiGateway->Lambda->DynamoDB,SES)
Mappings:
  Config:     
    prod:
      SesSenderEmailAddress: /<ParameterStoreNamespace>/prod/waterapi/SES_SENDER_EMAIL_ADDRESS
    dev:
      SesSenderEmailAddress: /<ParameterStoreNamespace>/dev/waterapi/SES_SENDER_EMAIL_ADDRESS
    avery:
      SesSenderEmailAddress: /<ParameterStoreNamespace>/dev/waterapi/SES_SENDER_EMAIL_ADDRESS
Parameters:
  DomainName:
    Type: String
    Default: <DomainName>
  Environment:
    Type: String
    Default: dev
    AllowedValues: [prod, dev, avery]
  GatsbyWebhookId:
    Type: String
    Default: /<ParameterStoreNamespace>/global/waterapi/gatsbyjs.com/WEBHOOK_ID
Resources:
  WaterApiUnauthenticatedApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub <Namespace>-${Environment}-WaterApiUnauthenticatedApi
      StageName: !Ref Environment
      DefinitionBody:
        swagger: 2.0
        info:
          title:
            Ref: AWS::StackName
        basePath: !Sub "/${Environment}"
        x-amazon-apigateway-binary-media-types:
          - '*/*'
        paths:
          /api/1/album/posts:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WaterApiLambda.Arn}/invocations
                passthroughBehavior: "when_no_match"
              responses: {}
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WaterApiLambda.Arn}/invocations
                passthroughBehavior: "when_no_match"
              responses: {}
          /{proxy+}:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WaterApiLambda.Arn}/invocations
                passthroughBehavior: "when_no_match"
              responses: {}
          /api/1/admin/magic-link:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WaterApiLambda.Arn}/invocations
                passthroughBehavior: "when_no_match"
              responses: {}
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WaterApiLambda.Arn}/invocations
                passthroughBehavior: "when_no_match"
              responses: {}
          /api/1/admin/hash:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WaterApiLambda.Arn}/invocations
                passthroughBehavior: "when_no_match"
              responses: {}
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WaterApiLambda.Arn}/invocations
                passthroughBehavior: "when_no_match"
              responses: {}
  WaterApiAuthenticatedApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub <Namespace>-${Environment}-WaterApiAuthenticatedApi
      StageName: !Ref Environment
      Auth:
        ApiKeyRequired: true
      DefinitionBody:
        swagger: 2.0
        info:
          title:
            Ref: AWS::StackName
        basePath: !Sub "/${Environment}"
        x-amazon-apigateway-binary-media-types:
          - '*/*'
        paths:
          /api/1/admin/album/post:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WaterApiLambda.Arn}/invocations
                passthroughBehavior: "when_no_match"
              responses: {}
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WaterApiLambda.Arn}/invocations
                passthroughBehavior: "when_no_match"
              responses: {}
          /api/1/admin/album/posts/{id}:
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WaterApiLambda.Arn}/invocations
                passthroughBehavior: "when_no_match"
              responses: {}
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WaterApiLambda.Arn}/invocations
                passthroughBehavior: "when_no_match"
              responses: {}
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WaterApiLambda.Arn}/invocations
                passthroughBehavior: "when_no_match"
              responses: {}
          /api/1/admin/album/s3/urls:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WaterApiLambda.Arn}/invocations
                passthroughBehavior: "when_no_match"
              responses: {}
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WaterApiLambda.Arn}/invocations
                passthroughBehavior: "when_no_match"
              responses: {}
          /api/1/admin/album/s3/images:
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WaterApiLambda.Arn}/invocations
                passthroughBehavior: "when_no_match"
              responses: {}
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WaterApiLambda.Arn}/invocations
                passthroughBehavior: "when_no_match"
              responses: {}
          /api/1/admin/cloudfront-cache:
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WaterApiLambda.Arn}/invocations
                passthroughBehavior: "when_no_match"
              responses: {}
            options:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WaterApiLambda.Arn}/invocations
                passthroughBehavior: "when_no_match"
              responses: {}
  WaterApiLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub <Namespace>-${Environment}-WaterApiLambda
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri:
        Bucket: !Sub <Namespace>-${Environment}-waterapi-api
        Key: lambda.zip
      MemorySize: 128
      Timeout: 300
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
        - CloudFrontFullAccess
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "ses:SendEmail"
                - "ses:SendRawEmail"
              Resource: "*"
              Condition:
                  StringEquals:
                    "ses:FromAddress": !Join ['', ['{{resolve:ssm:', !FindInMap [Config, !Ref Environment, SesSenderEmailAddress], ":1}}"]]
      Events:
        # Unauthenticted Routes
        GetAlbumPosts:
          Type: Api
          Properties:
            Path: /api/1/album/posts
            Method: get
            RestApiId: !Ref WaterApiUnauthenticatedApi
        RequestGraphQL:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: any
            RestApiId: !Ref WaterApiUnauthenticatedApi
        SendAdminMagicLink:
          Type: Api
          Properties:
            Path: /api/1/admin/magic-link
            Method: post
            RestApiId: !Ref WaterApiUnauthenticatedApi
        VerifyHash:
          Type: Api
          Properties:
            Path: /api/1/admin/hash
            Method: get
            RestApiId: !Ref WaterApiUnauthenticatedApi
        # Authenticted Routes
        CreateAlbumPost:
          Type: Api
          Properties:
            Path: /api/1/admin/album/post
            Method: post
            RestApiId: !Ref WaterApiAuthenticatedApi
        UpdateAlbumPost:
          Type: Api
          Properties:
            Path: /api/1/admin/album/posts/{id}
            Method: put
            RestApiId: !Ref WaterApiAuthenticatedApi
        DeleteAlbumPost:
          Type: Api
          Properties:
            Path: /api/1/admin/album/posts/{id}
            Method: delete
            RestApiId: !Ref WaterApiAuthenticatedApi
        GetS3UploadUrl:
          Type: Api
          Properties:
            Path: /api/1/admin/album/s3/urls
            Method: get
            RestApiId: !Ref WaterApiAuthenticatedApi
        DeleteAlbumImages:
          Type: Api
          Properties:
            Path: /api/1/admin/album/s3/images
            Method: delete
            RestApiId: !Ref WaterApiAuthenticatedApi
        DeleteCloudFrontCache:
          Type: Api
          Properties:
            Path: /api/1/admin/cloudfront-cache
            Method: delete
            RestApiId: !Ref WaterApiAuthenticatedApi
      Environment:
        Variables:
          ALLOWED_MAGICLINK_URL: !Sub "https://${DomainName}"
          AIRCDN_DISTRIBUTION_ID: <AirCdnDistributionId>
          ENVIRONMENT: !Ref Environment 
          GATSBY_WEBHOOK_ID: !Sub "{{resolve:ssm:${GatsbyWebhookId}:1}}"
          ALBUM_POSTS_TABLE: !Ref WaterApiAlbumPostsTable
          ADMINS_TABLE: !Ref WaterApiAdminsTable
          EARTHBUCKET_MEDIA_BUCKET_NAME: !Sub <Namespace>-${Environment}-earthbucket-media
          SES_SENDER_EMAIL_ADDRESS: !Join ['', ['{{resolve:ssm:', !FindInMap [Config, !Ref Environment, SesSenderEmailAddress], ":1}}"]]
  WaterApiAlbumPostsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: partitionKey
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: partitionKey
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: !Sub <Namespace>-${Environment}-WaterApiAlbumPostsTable
  WaterApiAdminsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: partitionKey
          KeyType: HASH
        - AttributeName: email
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: partitionKey
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: !Sub <Namespace>-${Environment}-WaterApiAdminsTable
  WaterApiSESConfigSet:
    Type: AWS::SES::ConfigurationSet
    Properties:
      Name: !Sub <Namespace>-${Environment}-WaterApiSESConfigSet
  WaterApiSESCWEventDestination:
    Type: AWS::SES::ConfigurationSetEventDestination
    Properties:
      ConfigurationSetName: !Ref WaterApiSESConfigSet
      EventDestination:
        Name: !Sub <Namespace>-${Environment}-WaterApiSESCWEventDestination
        Enabled: true
        MatchingEventTypes: ["bounce", "complaint", "delivery", "reject", "send"]
        CloudWatchDestination:
          DimensionConfigurations:
          - DimensionName: !Ref WaterApiSESConfigSet
            DefaultDimensionValue: 'null'
            DimensionValueSource: emailHeader
  WaterApiDocsS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub <Namespace>-${Environment}-waterapi-docs
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
  WaterApiDocsS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WaterApiDocsS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Sid: AddPerm
          Effect: Allow
          Principal: '*'
          Action:
          - s3:GetObject
          - s3:PutObject
          Resource:
          - !Sub "arn:aws:s3:::<Namespace>-${Environment}-waterapi-docs/*"
          Condition:
            StringLike:
              aws:Referer:
                # S3 will give a 403 on it's bucket endpoints. It will only return a 200 AirCdn passes in this designated url.
                - !Sub "https://${DomainName}/*"
Outputs:
  WaterApiAdminsTableUrl:
    Description: The Admins Table authorizes which users can authenticate with WaterApi.
    Value: !Sub "https://console.aws.amazon.com/dynamodb/home?region=${AWS::Region}#tables:selected=${WaterApiAdminsTable};tab=items"
  WaterApiUnauthenticatedApiUrl:
    Description: API Gateway Url
    Value: !Sub ${WaterApiUnauthenticatedApi}.execute-api.${AWS::Region}.amazonaws.com
  WaterApiAuthenticatedApiUrl:
    Description: API Gateway Url
    Value: !Sub ${WaterApiAuthenticatedApi}.execute-api.${AWS::Region}.amazonaws.com
  WaterApiAuthenticatedApi:
    Description: API Gateway Authenticated Resource Id
    Value: !Ref WaterApiAuthenticatedApi
  WaterApiEmail:
    Description: Email used for SES messages
    Value: !Join ['', ['{{resolve:ssm:', !FindInMap [Config, !Ref Environment, SesSenderEmailAddress], ":1}}"]]